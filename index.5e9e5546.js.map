{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,8EAQMC,G,aAAOC,SAASC,cAAc,WAC9BC,EAAiBF,SAASC,cAAc,kBACxCE,EAAgB,cAChBC,EAAc,YACdC,EAAU,kBAEhBN,EAAKO,iBAAiB,S,SAEUC,G,OAAjBC,EAAgBC,MAAAC,KAAAC,U,IAD/B,IAAMC,EAAc,IAAI,EAAAC,EAAAC,S,SACTN,I,OAAAA,EAAfO,EAAAlB,EAAA,CAAAkB,EAAAC,GAAAC,MAAA,SAAAC,EAAgCX,G,IAKtBY,EACAC,EAEAC,EACFC,EAGEC,EAGIC,EAIFC,EACFC,EACKC,EAOLC,EACKC,EAOHC,EACAC,EAGAC,EAIFC,EACAC,EAOKC,EAMAC,EAOAC,EAKAC,E,qEAjDTX,EAAA,SAAqBY,GACnB,OAAOA,EACJC,KAAI,SAAAC,GACH,OAAOA,C,IAERC,MAAK,SAAAD,G,OAAMA,EAAGE,KAAKC,SAAS,YAAcH,EAAGE,I,KAGlDd,EAAA,SAAsBgB,GACpB,GAAKA,EAGH,MAAO,iCAA4CC,OAAXD,EAAOE,KAF/ChC,EAAAiC,GAASC,OAAOC,QAAQ,gC,EAqB5Bf,EAAA,WACOJ,EAAUoB,OACbpC,EAAAiC,GAASC,OAAOC,QAAQ,wBAE1BhB,EAAUkB,UAAUC,OAAO,mB,EAE7BjB,EAAA,WACElC,EAAeoD,UAAY,GAC3BpD,EAAekD,UAAUG,IAAI,aAC7BvD,SAASwD,oBAAoB,UAAWnB,GACxCnC,EAAesD,oBAAoB,QAASlB,GAC5CL,EAAcuB,oBAAoB,QAASrB,E,EAE7CE,EAAA,SAAiBoB,GACI,WAAfA,EAAMC,MACRtB,G,EAGJE,EAAA,SAA0BmB,GAEI,SAA1BA,EAAME,OAAOC,UACa,QAA1BH,EAAME,OAAOC,UAEbxB,IAEEqB,EAAME,SAAWF,EAAMI,eACzBzB,IAEgC,YAA9BqB,EAAME,OAAOG,QAAQnB,OACvB,EAAAoB,EAAAjD,SAAsBX,EAAeiB,EAAIW,GAET,UAA9B0B,EAAME,OAAOG,QAAQnB,OACvB,EAAAoB,EAAAjD,SAAsBV,EAAagB,EAAIW,E,WAlFjB,OAAxBxB,EAAIoD,OAAOC,SAAiB,C,uDAG1BzC,EAAOZ,EAAIoD,OAAOK,QAAQ,MAC1B5C,EAAKD,EAAK2C,QAAQ1C,GACxBR,EAAYqD,OAAS7C,E,UACFR,EAAYsD,c,WAAzB7C,EAAI8C,EAAAC,KACN9C,EAASD,EAAKC,OAEU,QAAxBf,EAAIoD,OAAOC,UAA8C,SAAxBrD,EAAIoD,OAAOC,SAAmB,C,iBAC7DrC,EAAUhB,EAAIoD,OAAOK,QAAQ,QACzBZ,UAAUC,OAAO,UACrB9B,EAAQ6B,UAAUiB,SAAS,YACvB7C,EAAQF,EAAO,IACrB,EAAAyC,EAAAO,2BAA0BjE,EAASmB,EAAOJ,I,yCAGxBR,EAAY2D,iB,QAA1B9C,EAAK0C,EAAAC,KACP1C,EAAMD,EAAM+C,QAQZ5C,EAAoBD,EAAYD,GAQ9BI,EAAYD,EAAaD,IACzBG,GAAY,EAAA0C,EAAA3D,SAAUO,IAClB8B,MAAQrB,EAEZE,GAAa,EAAA0C,EAAA5D,SAASiB,GAE5B7B,EAAeoD,UAAYtB,EAEvBC,EAAgBjC,SAASC,cAAc,gBACvCiC,EAAYlC,SAASC,cAAc,WAEvCC,EAAekD,UAAUuB,OAAO,aAChCzE,EAAeI,iBAAiB,QAASgC,GACzCtC,SAASM,iBAAiB,UAAW+B,GACrCJ,EAAc3B,iBAAiB,QAAS6B,G,0DAuC1CpB,EAAAiC,GAASC,OAAOC,QAAQ,+B,2DAzFGzC,MAAAC,KAAAC,U","sources":["src/js/modal-open.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport FilmApi from './movieAPI';\nimport filmCard from '../templates/modal-film.hbs';\nimport fixObject from './fixObject';\n\nimport setFilmToLocalStorage from './setFilmToLocalStorage';\nimport { setFavFilmsToLocalStorage } from './setFilmToLocalStorage';\n\nconst ulEl = document.querySelector('.films');\nconst modalContainer = document.querySelector('#js-film-modal');\nconst LOCAL_WATCHED = 'watchedList';\nconst LOCAL_QUEUE = 'queueList';\nconst FAV_KEY = 'favouriteMovies';\n\nulEl.addEventListener('click', onFimlsListClick);\nconst filmAPIByID = new FilmApi();\nasync function onFimlsListClick(evt) {\n  try {\n    if (evt.target.nodeName === 'UL') {\n      return;\n    }\n    const item = evt.target.closest('li');\n    const id = item.dataset.id;\n    filmAPIByID.idFilm = id;\n    const film = await filmAPIByID.getFilmByID();\n    let genres = film.genres;\n\n    if (evt.target.nodeName === 'svg' || evt.target.nodeName === 'path') {\n      let favIcon = evt.target.closest('svg');\n      favIcon.classList.toggle('active');\n      if (favIcon.classList.contains('active')) {\n        const genre = genres[0];\n        setFavFilmsToLocalStorage(FAV_KEY, genre, id);\n      }\n    } else {\n      const video = await filmAPIByID.getTrailerById();\n      let arr = video.results;\n      function findTrailer(arr) {\n        return arr\n          .map(el => {\n            return el;\n          })\n          .find(el => el.name.includes('Trailer') || el.name);\n      }\n      let objectWithTrailer = findTrailer(arr);\n      function trailerCheck(object) {\n        if (!object) {\n          Notiflix.Notify.failure('Oops! Trailer did not find...');\n        } else {\n          return `https://www.youtube.com/embed/${object.key}`;\n        }\n      }\n      const movieLink = trailerCheck(objectWithTrailer);\n      const fixedFilm = fixObject(film);\n      fixedFilm.movie = movieLink;\n\n      const filmMarkUp = filmCard(fixedFilm);\n\n      modalContainer.innerHTML = filmMarkUp;\n\n      let trailerBtnRef = document.querySelector('.trailerShow');\n      let iframeRef = document.querySelector('.hidden');\n\n      modalContainer.classList.remove('is-hidden');\n      modalContainer.addEventListener('click', onModalFilmClick);\n      document.addEventListener('keydown', onClose);\n      trailerBtnRef.addEventListener('click', toggleIframe);\n\n      function toggleIframe() {\n        if (!fixedFilm.movie) {\n          Notiflix.Notify.failure('Trailer did not find');\n        }\n        iframeRef.classList.toggle('trailer__youtube');\n      }\n      function closeModal() {\n        modalContainer.innerHTML = '';\n        modalContainer.classList.add('is-hidden');\n        document.removeEventListener('keydown', onClose);\n        modalContainer.removeEventListener('click', onModalFilmClick);\n        trailerBtnRef.removeEventListener('click', toggleIframe);\n      }\n      function onClose(event) {\n        if (event.code === 'Escape') {\n          closeModal();\n        }\n      }\n      function onModalFilmClick(event) {\n        if (\n          event.target.nodeName === 'path' ||\n          event.target.nodeName === 'svg'\n        ) {\n          closeModal();\n        }\n        if (event.target === event.currentTarget) {\n          closeModal();\n        }\n        if (event.target.dataset.name === 'watched') {\n          setFilmToLocalStorage(LOCAL_WATCHED, id, fixedFilm);\n        }\n        if (event.target.dataset.name === 'queue') {\n          setFilmToLocalStorage(LOCAL_QUEUE, id, fixedFilm);\n        }\n      }\n    }\n  } catch (error) {\n    Notiflix.Notify.failure('Oops! Something gets wrong!');\n  }\n}\n"],"names":["$bpxeT","parcelRequire","$11a1cf5bd10bfbe0$var$ulEl","document","querySelector","$11a1cf5bd10bfbe0$var$modalContainer","$11a1cf5bd10bfbe0$var$LOCAL_WATCHED","$11a1cf5bd10bfbe0$var$LOCAL_QUEUE","$11a1cf5bd10bfbe0$var$FAV_KEY","addEventListener","evt","$11a1cf5bd10bfbe0$var$_onFimlsListClick","apply","this","arguments","$11a1cf5bd10bfbe0$var$filmAPIByID","$lHIzZ","default","$parcel$interopDefault","$2TvXO","mark","_callee","item","id","film","genres","favIcon","genre","video","arr1","findTrailer","objectWithTrailer","trailerCheck","movieLink","fixedFilm","filmMarkUp","trailerBtnRef","iframeRef","toggleIframe","closeModal","onClose","onModalFilmClick","arr","map","el","find","name","includes","object","concat","key","$iU1Pc","Notify","failure","movie","classList","toggle","innerHTML","add","removeEventListener","event","code","target","nodeName","currentTarget","dataset","$bGg9a","closest","idFilm","getFilmByID","_ctx","sent","contains","setFavFilmsToLocalStorage","getTrailerById","results","$pWSgs","$2eIIo","remove"],"version":3,"file":"index.5e9e5546.js.map"}